// Generated by `wit-bindgen` 0.16.0. DO NOT EDIT!
const _: () = {
  
  #[doc(hidden)]
  #[export_name = "start"]
  #[allow(non_snake_case)]
  unsafe extern "C" fn __export_start() -> i32 {
    #[allow(unused_imports)]
    use wit_bindgen::rt::{alloc, vec::Vec, string::String};
    
    // Before executing any other code, use this function to run all static
    // constructors, if they have not yet been run. This is a hack required
    // to work around wasi-libc ctors calling import functions to initialize
    // the environment.
    //
    // This functionality will be removed once rust 1.69.0 is stable, at which
    // point wasi-libc will no longer have this behavior.
    //
    // See
    // https://github.com/bytecodealliance/preview2-prototyping/issues/99
    // for more details.
    #[cfg(target_arch="wasm32")]
    wit_bindgen::rt::run_ctors_once();
    
    let result0 = <_GuestImpl as Guest>::start();
    let result1 = match result0 {
      Ok(_) => { 0i32 },
      Err(_) => { 1i32 },
    };result1
  }
};
use super::Component as _GuestImpl;
pub trait Guest {
  fn start() -> Result<(),()>;
}
pub mod my {
  pub mod project {
    
    #[allow(clippy::all)]
    pub mod types {
      #[used]
      #[doc(hidden)]
      #[cfg(target_arch = "wasm32")]
      static __FORCE_SECTION_REF: fn() = super::super::super::__link_section;
      #[allow(unused_unsafe, clippy::all)]
      pub fn i2c_init(address: u8,) -> Result<u32,u32>{
        
        #[allow(unused_imports)]
        use wit_bindgen::rt::{alloc, vec::Vec, string::String};
        unsafe {
          
          #[repr(align(4))]
          struct RetArea([u8; 8]);
          let mut ret_area = ::core::mem::MaybeUninit::<RetArea>::uninit();
          let ptr0 = ret_area.as_mut_ptr() as i32;
          #[cfg(target_arch = "wasm32")]
          #[link(wasm_import_module = "my:project/types")]
          extern "C" {
            #[link_name = "i2c-init"]
            fn wit_import(_: i32, _: i32, );
          }
          
          #[cfg(not(target_arch = "wasm32"))]
          fn wit_import(_: i32, _: i32, ){ unreachable!() }
          wit_import(wit_bindgen::rt::as_i32(address), ptr0);
          let l1 = i32::from(*((ptr0 + 0) as *const u8));
          match l1 {
            0 => {
              let e = {
                let l2 = *((ptr0 + 4) as *const i32);
                
                l2 as u32
              };
              Ok(e)
            }
            1 => {
              let e = {
                let l3 = *((ptr0 + 4) as *const i32);
                
                l3 as u32
              };
              Err(e)
            }
            _ => wit_bindgen::rt::invalid_enum_discriminant(),
          }
        }
      }
      #[allow(unused_unsafe, clippy::all)]
      pub fn write(message: &str,) -> Result<u32,u32>{
        
        #[allow(unused_imports)]
        use wit_bindgen::rt::{alloc, vec::Vec, string::String};
        unsafe {
          
          #[repr(align(4))]
          struct RetArea([u8; 8]);
          let mut ret_area = ::core::mem::MaybeUninit::<RetArea>::uninit();
          let vec0 = message;
          let ptr0 = vec0.as_ptr() as i32;
          let len0 = vec0.len() as i32;
          let ptr1 = ret_area.as_mut_ptr() as i32;
          #[cfg(target_arch = "wasm32")]
          #[link(wasm_import_module = "my:project/types")]
          extern "C" {
            #[link_name = "write"]
            fn wit_import(_: i32, _: i32, _: i32, );
          }
          
          #[cfg(not(target_arch = "wasm32"))]
          fn wit_import(_: i32, _: i32, _: i32, ){ unreachable!() }
          wit_import(ptr0, len0, ptr1);
          let l2 = i32::from(*((ptr1 + 0) as *const u8));
          match l2 {
            0 => {
              let e = {
                let l3 = *((ptr1 + 4) as *const i32);
                
                l3 as u32
              };
              Ok(e)
            }
            1 => {
              let e = {
                let l4 = *((ptr1 + 4) as *const i32);
                
                l4 as u32
              };
              Err(e)
            }
            _ => wit_bindgen::rt::invalid_enum_discriminant(),
          }
        }
      }
      
    }
    
  }
}

#[cfg(target_arch = "wasm32")]
#[link_section = "component-type:i2c-app"]
#[doc(hidden)]
pub static __WIT_BINDGEN_COMPONENT_TYPE: [u8; 408] = [3, 0, 7, 105, 50, 99, 45, 97, 112, 112, 0, 97, 115, 109, 13, 0, 1, 0, 7, 111, 1, 65, 2, 1, 66, 9, 1, 121, 4, 0, 6, 100, 101, 118, 105, 99, 101, 3, 0, 0, 1, 121, 4, 0, 5, 101, 114, 114, 111, 114, 3, 0, 2, 1, 106, 1, 121, 1, 121, 1, 64, 1, 7, 97, 100, 100, 114, 101, 115, 115, 125, 0, 4, 4, 0, 8, 105, 50, 99, 45, 105, 110, 105, 116, 1, 5, 1, 64, 1, 7, 109, 101, 115, 115, 97, 103, 101, 115, 0, 4, 4, 0, 5, 119, 114, 105, 116, 101, 1, 6, 4, 1, 16, 109, 121, 58, 112, 114, 111, 106, 101, 99, 116, 47, 116, 121, 112, 101, 115, 5, 0, 11, 11, 1, 0, 5, 116, 121, 112, 101, 115, 3, 0, 0, 7, 156, 1, 1, 65, 2, 1, 65, 5, 1, 66, 9, 1, 121, 4, 0, 6, 100, 101, 118, 105, 99, 101, 3, 0, 0, 1, 121, 4, 0, 5, 101, 114, 114, 111, 114, 3, 0, 2, 1, 106, 1, 121, 1, 121, 1, 64, 1, 7, 97, 100, 100, 114, 101, 115, 115, 125, 0, 4, 4, 0, 8, 105, 50, 99, 45, 105, 110, 105, 116, 1, 5, 1, 64, 1, 7, 109, 101, 115, 115, 97, 103, 101, 115, 0, 4, 4, 0, 5, 119, 114, 105, 116, 101, 1, 6, 3, 1, 16, 109, 121, 58, 112, 114, 111, 106, 101, 99, 116, 47, 116, 121, 112, 101, 115, 5, 0, 1, 106, 0, 0, 1, 64, 0, 0, 1, 4, 0, 5, 115, 116, 97, 114, 116, 1, 2, 4, 1, 18, 109, 121, 58, 112, 114, 111, 106, 101, 99, 116, 47, 105, 50, 99, 45, 97, 112, 112, 4, 0, 11, 13, 1, 0, 7, 105, 50, 99, 45, 97, 112, 112, 3, 2, 0, 0, 16, 12, 112, 97, 99, 107, 97, 103, 101, 45, 100, 111, 99, 115, 0, 123, 125, 0, 70, 9, 112, 114, 111, 100, 117, 99, 101, 114, 115, 1, 12, 112, 114, 111, 99, 101, 115, 115, 101, 100, 45, 98, 121, 2, 13, 119, 105, 116, 45, 99, 111, 109, 112, 111, 110, 101, 110, 116, 6, 48, 46, 49, 56, 46, 50, 16, 119, 105, 116, 45, 98, 105, 110, 100, 103, 101, 110, 45, 114, 117, 115, 116, 6, 48, 46, 49, 54, 46, 48];

#[inline(never)]
#[doc(hidden)]
#[cfg(target_arch = "wasm32")]
pub fn __link_section() {}
