// Generated by `wit-bindgen` 0.18.0. DO NOT EDIT!
pub mod sketch {
  pub mod embedded {
    
    #[allow(clippy::all)]
    pub mod delay {
      #[used]
      #[doc(hidden)]
      #[cfg(target_arch = "wasm32")]
      static __FORCE_SECTION_REF: fn() = super::super::super::__link_section;
      /// Delay with up to nanosecond precision.
      
      #[derive(Debug)]
      #[repr(transparent)]
      pub struct Delay{
        handle: wit_bindgen::rt::Resource<Delay>,
      }
      
      impl Delay{
        #[doc(hidden)]
        pub unsafe fn from_handle(handle: u32) -> Self {
          Self {
            handle: wit_bindgen::rt::Resource::from_handle(handle),
          }
        }
        
        #[doc(hidden)]
        pub fn into_handle(self) -> u32 {
          wit_bindgen::rt::Resource::into_handle(self.handle)
        }
        
        #[doc(hidden)]
        pub fn handle(&self) -> u32 {
          wit_bindgen::rt::Resource::handle(&self.handle)
        }
      }
      
      
      unsafe impl wit_bindgen::rt::WasmResource for Delay{
        #[inline]
        unsafe fn drop(_handle: u32) {
          #[cfg(not(target_arch = "wasm32"))]
          unreachable!();
          
          #[cfg(target_arch = "wasm32")]
          {
            #[link(wasm_import_module = "sketch:embedded/delay@0.0.0")]
            extern "C" {
              #[link_name = "[resource-drop]delay"]
              fn drop(_: u32);
            }
            
            drop(_handle);
          }
        }
      }
      
      impl Delay {
        #[allow(unused_unsafe, clippy::all)]
        /// Pauses execution for at minimum `ns` nanoseconds. Pause can be
        /// longer if the implementation requires it due to precision/timing
        /// issues.
        pub fn delay_ns(&self,ns: u32,){
          
          #[allow(unused_imports)]
          use wit_bindgen::rt::{alloc, vec::Vec, string::String};
          unsafe {
            
            #[cfg(target_arch = "wasm32")]
            #[link(wasm_import_module = "sketch:embedded/delay@0.0.0")]
            extern "C" {
              #[link_name = "[method]delay.delay-ns"]
              fn wit_import(_: i32, _: i32, );
            }
            
            #[cfg(not(target_arch = "wasm32"))]
            fn wit_import(_: i32, _: i32, ){ unreachable!() }
            wit_import((self).handle() as i32, wit_bindgen::rt::as_i32(ns));
          }
        }
      }
      
    }
    
    
    #[allow(clippy::all)]
    pub mod i2c {
      #[used]
      #[doc(hidden)]
      #[cfg(target_arch = "wasm32")]
      static __FORCE_SECTION_REF: fn() = super::super::super::__link_section;
      /// An address value, in either 7-bit or 10-bit form, depending on the device.
      pub type Address = u16;
      /// No-acknowledge error source.
      /// 
      /// In cases where it is possible, a device should indicate if a no
      /// acknowledge response was received to an address versus a no acknowledge
      /// to a data byte. Where it is not possible to differentiate, Unknown
      /// should be indicated.
      #[repr(u8)]
      #[derive(Clone, Copy, Eq, PartialEq)]
      pub enum NoAcknowledgeSource {
        /// The device did not acknowledge its address. The device may be
        /// missing.
        Address,
        /// The device did not acknowledge the data. It may not be ready to
        /// process requests at the moment.
        Data,
        /// Either the device did not acknowledge its address or the data, but
        /// it is unknown which.
        Unknown,
      }
      impl ::core::fmt::Debug for NoAcknowledgeSource {
        fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
          match self {
            NoAcknowledgeSource::Address => {
              f.debug_tuple("NoAcknowledgeSource::Address").finish()
            }
            NoAcknowledgeSource::Data => {
              f.debug_tuple("NoAcknowledgeSource::Data").finish()
            }
            NoAcknowledgeSource::Unknown => {
              f.debug_tuple("NoAcknowledgeSource::Unknown").finish()
            }
          }
        }
      }
      
      impl NoAcknowledgeSource{
        pub(crate) unsafe fn _lift(val: u8) -> NoAcknowledgeSource{
          if !cfg!(debug_assertions) {
            return ::core::mem::transmute(val);
          }
          
          match val {
            0 => NoAcknowledgeSource::Address,
            1 => NoAcknowledgeSource::Data,
            2 => NoAcknowledgeSource::Unknown,
            
            _ => panic!("invalid enum discriminant"),
          }
        }
      }
      
      /// Operation errors.
      #[derive(Clone, Copy)]
      pub enum ErrorCode{
        /// Bus error occurred. e.g. A START or a STOP condition is detected and
        /// is not located after a multiple of 9 SCL clock pulses.
        Bus,
        /// The arbitration was lost, e.g. electrical problems with the clock signal.
        ArbitrationLoss,
        /// A bus operation was not acknowledged, e.g. due to the addressed
        /// device not being available on the bus or the device not being ready
        /// to process requests at the moment.
        NoAcknowledge(NoAcknowledgeSource),
        /// The peripheral receive buffer was overrun.
        Overrun,
        /// A different error occurred.
        Other,
      }
      impl ::core::fmt::Debug for ErrorCode {
        fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
          match self {
            ErrorCode::Bus => {
              f.debug_tuple("ErrorCode::Bus").finish()
            }
            ErrorCode::ArbitrationLoss => {
              f.debug_tuple("ErrorCode::ArbitrationLoss").finish()
            }
            ErrorCode::NoAcknowledge(e) => {
              f.debug_tuple("ErrorCode::NoAcknowledge").field(e).finish()
            }
            ErrorCode::Overrun => {
              f.debug_tuple("ErrorCode::Overrun").finish()
            }
            ErrorCode::Other => {
              f.debug_tuple("ErrorCode::Other").finish()
            }
          }
        }
      }
      impl ::core::fmt::Display for ErrorCode {
        fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
          write!(f, "{:?}", self)
        }
      }
      
      impl std::error::Error for ErrorCode {}
      /// An operation used by the `transaction` method.
      #[derive(Clone)]
      pub enum Operation{
        /// Read the give number of bytes.
        Read(u64),
        /// Write the given bytes.
        Write(wit_bindgen::rt::vec::Vec::<u8>),
      }
      impl ::core::fmt::Debug for Operation {
        fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
          match self {
            Operation::Read(e) => {
              f.debug_tuple("Operation::Read").field(e).finish()
            }
            Operation::Write(e) => {
              f.debug_tuple("Operation::Write").field(e).finish()
            }
          }
        }
      }
      
      #[derive(Debug)]
      #[repr(transparent)]
      pub struct I2c{
        handle: wit_bindgen::rt::Resource<I2c>,
      }
      
      impl I2c{
        #[doc(hidden)]
        pub unsafe fn from_handle(handle: u32) -> Self {
          Self {
            handle: wit_bindgen::rt::Resource::from_handle(handle),
          }
        }
        
        #[doc(hidden)]
        pub fn into_handle(self) -> u32 {
          wit_bindgen::rt::Resource::into_handle(self.handle)
        }
        
        #[doc(hidden)]
        pub fn handle(&self) -> u32 {
          wit_bindgen::rt::Resource::handle(&self.handle)
        }
      }
      
      
      unsafe impl wit_bindgen::rt::WasmResource for I2c{
        #[inline]
        unsafe fn drop(_handle: u32) {
          #[cfg(not(target_arch = "wasm32"))]
          unreachable!();
          
          #[cfg(target_arch = "wasm32")]
          {
            #[link(wasm_import_module = "sketch:embedded/i2c@0.0.0")]
            extern "C" {
              #[link_name = "[resource-drop]i2c"]
              fn drop(_: u32);
            }
            
            drop(_handle);
          }
        }
      }
      
      impl I2c {
        #[allow(unused_unsafe, clippy::all)]
        /// Execute the provided `operation`s on the IÂ²C bus.
        pub fn transaction(&self,address: Address,operations: &[Operation],) -> Result<wit_bindgen::rt::vec::Vec::<wit_bindgen::rt::vec::Vec::<u8>>,ErrorCode>{
          
          #[allow(unused_imports)]
          use wit_bindgen::rt::{alloc, vec::Vec, string::String};
          unsafe {
            
            #[repr(align(4))]
            struct RetArea([u8; 12]);
            let mut ret_area = ::core::mem::MaybeUninit::<RetArea>::uninit();
            let vec1 = operations;
            let len1 = vec1.len() as i32;
            let layout1 = alloc::Layout::from_size_align_unchecked(vec1.len() * 16, 8);
            let result1 = if layout1.size() != 0
            {
              let ptr = alloc::alloc(layout1);
              if ptr.is_null()
              {
                alloc::handle_alloc_error(layout1);
              }
              ptr
            }else {{
              ::core::ptr::null_mut()
            }};
            for (i, e) in vec1.into_iter().enumerate() {
              let base = result1 as i32 + (i as i32) * 16;
              {
                match e {
                  Operation::Read(e) => {
                    *((base + 0) as *mut u8) = (0i32) as u8;
                    *((base + 8) as *mut i64) = wit_bindgen::rt::as_i64(e);
                  },
                  Operation::Write(e) => {
                    *((base + 0) as *mut u8) = (1i32) as u8;
                    let vec0 = e;
                    let ptr0 = vec0.as_ptr() as i32;
                    let len0 = vec0.len() as i32;
                    *((base + 12) as *mut i32) = len0;
                    *((base + 8) as *mut i32) = ptr0;
                  },
                }
              }
            }
            let ptr2 = ret_area.as_mut_ptr() as i32;
            #[cfg(target_arch = "wasm32")]
            #[link(wasm_import_module = "sketch:embedded/i2c@0.0.0")]
            extern "C" {
              #[link_name = "[method]i2c.transaction"]
              fn wit_import(_: i32, _: i32, _: i32, _: i32, _: i32, );
            }
            
            #[cfg(not(target_arch = "wasm32"))]
            fn wit_import(_: i32, _: i32, _: i32, _: i32, _: i32, ){ unreachable!() }
            wit_import((self).handle() as i32, wit_bindgen::rt::as_i32(address), result1 as i32, len1, ptr2);
            let l3 = i32::from(*((ptr2 + 0) as *const u8));
            if layout1.size() != 0 {
              alloc::dealloc(result1, layout1);
            }
            match l3 {
              0 => {
                let e = {
                  let l4 = *((ptr2 + 4) as *const i32);
                  let l5 = *((ptr2 + 8) as *const i32);
                  let base9 = l4;
                  let len9 = l5;
                  let mut result9 = Vec::with_capacity(len9 as usize);
                  for i in 0..len9 {
                    let base = base9 + i * 8;
                    let e9 = {
                      let l6 = *((base + 0) as *const i32);
                      let l7 = *((base + 4) as *const i32);
                      let len8 = l7 as usize;
                      
                      Vec::from_raw_parts(l6 as *mut _, len8, len8)
                    };
                    result9.push(e9);
                  }
                  wit_bindgen::rt::dealloc(base9, (len9 as usize) * 8, 4);
                  
                  result9
                };
                Ok(e)
              }
              1 => {
                let e = {
                  let l10 = i32::from(*((ptr2 + 4) as *const u8));
                  let v12 = match l10 {
                    0 => {
                      ErrorCode::Bus
                    }
                    1 => {
                      ErrorCode::ArbitrationLoss
                    }
                    2 => {
                      let e12 = {
                        let l11 = i32::from(*((ptr2 + 5) as *const u8));
                        
                        NoAcknowledgeSource::_lift(l11 as u8)
                      };
                      ErrorCode::NoAcknowledge(e12)
                    }
                    3 => {
                      ErrorCode::Overrun
                    }
                    n => {
                      debug_assert_eq!(n, 4, "invalid enum discriminant");
                      ErrorCode::Other
                    }
                  };
                  
                  v12
                };
                Err(e)
              }
              _ => wit_bindgen::rt::invalid_enum_discriminant(),
            }
          }
        }
      }
      impl I2c {
        #[allow(unused_unsafe, clippy::all)]
        /// Reads `len` bytes from address `address`.
        pub fn read(&self,address: Address,len: u64,) -> Result<wit_bindgen::rt::vec::Vec::<u8>,ErrorCode>{
          
          #[allow(unused_imports)]
          use wit_bindgen::rt::{alloc, vec::Vec, string::String};
          unsafe {
            
            #[repr(align(4))]
            struct RetArea([u8; 12]);
            let mut ret_area = ::core::mem::MaybeUninit::<RetArea>::uninit();
            let ptr0 = ret_area.as_mut_ptr() as i32;
            #[cfg(target_arch = "wasm32")]
            #[link(wasm_import_module = "sketch:embedded/i2c@0.0.0")]
            extern "C" {
              #[link_name = "[method]i2c.read"]
              fn wit_import(_: i32, _: i32, _: i64, _: i32, );
            }
            
            #[cfg(not(target_arch = "wasm32"))]
            fn wit_import(_: i32, _: i32, _: i64, _: i32, ){ unreachable!() }
            wit_import((self).handle() as i32, wit_bindgen::rt::as_i32(address), wit_bindgen::rt::as_i64(len), ptr0);
            let l1 = i32::from(*((ptr0 + 0) as *const u8));
            match l1 {
              0 => {
                let e = {
                  let l2 = *((ptr0 + 4) as *const i32);
                  let l3 = *((ptr0 + 8) as *const i32);
                  let len4 = l3 as usize;
                  
                  Vec::from_raw_parts(l2 as *mut _, len4, len4)
                };
                Ok(e)
              }
              1 => {
                let e = {
                  let l5 = i32::from(*((ptr0 + 4) as *const u8));
                  let v7 = match l5 {
                    0 => {
                      ErrorCode::Bus
                    }
                    1 => {
                      ErrorCode::ArbitrationLoss
                    }
                    2 => {
                      let e7 = {
                        let l6 = i32::from(*((ptr0 + 5) as *const u8));
                        
                        NoAcknowledgeSource::_lift(l6 as u8)
                      };
                      ErrorCode::NoAcknowledge(e7)
                    }
                    3 => {
                      ErrorCode::Overrun
                    }
                    n => {
                      debug_assert_eq!(n, 4, "invalid enum discriminant");
                      ErrorCode::Other
                    }
                  };
                  
                  v7
                };
                Err(e)
              }
              _ => wit_bindgen::rt::invalid_enum_discriminant(),
            }
          }
        }
      }
      impl I2c {
        #[allow(unused_unsafe, clippy::all)]
        /// Writes bytes to target with address `address`.
        pub fn write(&self,address: Address,data: &[u8],) -> Result<(),ErrorCode>{
          
          #[allow(unused_imports)]
          use wit_bindgen::rt::{alloc, vec::Vec, string::String};
          unsafe {
            
            #[repr(align(1))]
            struct RetArea([u8; 3]);
            let mut ret_area = ::core::mem::MaybeUninit::<RetArea>::uninit();
            let vec0 = data;
            let ptr0 = vec0.as_ptr() as i32;
            let len0 = vec0.len() as i32;
            let ptr1 = ret_area.as_mut_ptr() as i32;
            #[cfg(target_arch = "wasm32")]
            #[link(wasm_import_module = "sketch:embedded/i2c@0.0.0")]
            extern "C" {
              #[link_name = "[method]i2c.write"]
              fn wit_import(_: i32, _: i32, _: i32, _: i32, _: i32, );
            }
            
            #[cfg(not(target_arch = "wasm32"))]
            fn wit_import(_: i32, _: i32, _: i32, _: i32, _: i32, ){ unreachable!() }
            wit_import((self).handle() as i32, wit_bindgen::rt::as_i32(address), ptr0, len0, ptr1);
            let l2 = i32::from(*((ptr1 + 0) as *const u8));
            match l2 {
              0 => {
                let e = ();
                Ok(e)
              }
              1 => {
                let e = {
                  let l3 = i32::from(*((ptr1 + 1) as *const u8));
                  let v5 = match l3 {
                    0 => {
                      ErrorCode::Bus
                    }
                    1 => {
                      ErrorCode::ArbitrationLoss
                    }
                    2 => {
                      let e5 = {
                        let l4 = i32::from(*((ptr1 + 2) as *const u8));
                        
                        NoAcknowledgeSource::_lift(l4 as u8)
                      };
                      ErrorCode::NoAcknowledge(e5)
                    }
                    3 => {
                      ErrorCode::Overrun
                    }
                    n => {
                      debug_assert_eq!(n, 4, "invalid enum discriminant");
                      ErrorCode::Other
                    }
                  };
                  
                  v5
                };
                Err(e)
              }
              _ => wit_bindgen::rt::invalid_enum_discriminant(),
            }
          }
        }
      }
      impl I2c {
        #[allow(unused_unsafe, clippy::all)]
        /// Writes bytes to address `address` and then reads `read-len` bytes
        /// in a single transaction.
        pub fn write_read(&self,address: Address,write: &[u8],read_len: u64,) -> Result<(),ErrorCode>{
          
          #[allow(unused_imports)]
          use wit_bindgen::rt::{alloc, vec::Vec, string::String};
          unsafe {
            
            #[repr(align(1))]
            struct RetArea([u8; 3]);
            let mut ret_area = ::core::mem::MaybeUninit::<RetArea>::uninit();
            let vec0 = write;
            let ptr0 = vec0.as_ptr() as i32;
            let len0 = vec0.len() as i32;
            let ptr1 = ret_area.as_mut_ptr() as i32;
            #[cfg(target_arch = "wasm32")]
            #[link(wasm_import_module = "sketch:embedded/i2c@0.0.0")]
            extern "C" {
              #[link_name = "[method]i2c.write-read"]
              fn wit_import(_: i32, _: i32, _: i32, _: i32, _: i64, _: i32, );
            }
            
            #[cfg(not(target_arch = "wasm32"))]
            fn wit_import(_: i32, _: i32, _: i32, _: i32, _: i64, _: i32, ){ unreachable!() }
            wit_import((self).handle() as i32, wit_bindgen::rt::as_i32(address), ptr0, len0, wit_bindgen::rt::as_i64(read_len), ptr1);
            let l2 = i32::from(*((ptr1 + 0) as *const u8));
            match l2 {
              0 => {
                let e = ();
                Ok(e)
              }
              1 => {
                let e = {
                  let l3 = i32::from(*((ptr1 + 1) as *const u8));
                  let v5 = match l3 {
                    0 => {
                      ErrorCode::Bus
                    }
                    1 => {
                      ErrorCode::ArbitrationLoss
                    }
                    2 => {
                      let e5 = {
                        let l4 = i32::from(*((ptr1 + 2) as *const u8));
                        
                        NoAcknowledgeSource::_lift(l4 as u8)
                      };
                      ErrorCode::NoAcknowledge(e5)
                    }
                    3 => {
                      ErrorCode::Overrun
                    }
                    n => {
                      debug_assert_eq!(n, 4, "invalid enum discriminant");
                      ErrorCode::Other
                    }
                  };
                  
                  v5
                };
                Err(e)
              }
              _ => wit_bindgen::rt::invalid_enum_discriminant(),
            }
          }
        }
      }
      
    }
    
  }
}
pub mod exports {
  pub mod sketch {
    pub mod embedded {
      
      #[allow(clippy::all)]
      pub mod run {
        #[used]
        #[doc(hidden)]
        #[cfg(target_arch = "wasm32")]
        static __FORCE_SECTION_REF: fn() = super::super::super::super::__link_section;
        pub type Delay = super::super::super::super::sketch::embedded::delay::Delay;
        pub type I2c = super::super::super::super::sketch::embedded::i2c::I2c;
        const _: () = {
          
          #[doc(hidden)]
          #[export_name = "sketch:embedded/run@0.0.0#run"]
          #[allow(non_snake_case)]
          unsafe extern "C" fn __export_run(arg0: i32,arg1: i32,) {
            #[allow(unused_imports)]
            use wit_bindgen::rt::{alloc, vec::Vec, string::String};
            
            // Before executing any other code, use this function to run all static
            // constructors, if they have not yet been run. This is a hack required
            // to work around wasi-libc ctors calling import functions to initialize
            // the environment.
            //
            // This functionality will be removed once rust 1.69.0 is stable, at which
            // point wasi-libc will no longer have this behavior.
            //
            // See
            // https://github.com/bytecodealliance/preview2-prototyping/issues/99
            // for more details.
            #[cfg(target_arch="wasm32")]
            wit_bindgen::rt::run_ctors_once();
            
            <_GuestImpl as Guest>::run(super::super::super::super::sketch::embedded::i2c::I2c::from_handle(arg0 as u32), super::super::super::super::sketch::embedded::delay::Delay::from_handle(arg1 as u32));
          }
        };
        use super::super::super::super::super::Component as _GuestImpl;
        pub trait Guest {
          fn run(connection: I2c,delay: Delay,);
        }
        
      }
      
    }
  }
}

#[cfg(target_arch = "wasm32")]
#[link_section = "component-type:screen"]
#[doc(hidden)]
pub static __WIT_BINDGEN_COMPONENT_TYPE: [u8; 841] = [0, 97, 115, 109, 13, 0, 1, 0, 0, 25, 22, 119, 105, 116, 45, 99, 111, 109, 112, 111, 110, 101, 110, 116, 45, 101, 110, 99, 111, 100, 105, 110, 103, 4, 0, 7, 205, 5, 1, 65, 2, 1, 65, 8, 1, 66, 4, 4, 0, 5, 100, 101, 108, 97, 121, 3, 1, 1, 104, 0, 1, 64, 2, 4, 115, 101, 108, 102, 1, 2, 110, 115, 121, 1, 0, 4, 0, 22, 91, 109, 101, 116, 104, 111, 100, 93, 100, 101, 108, 97, 121, 46, 100, 101, 108, 97, 121, 45, 110, 115, 1, 2, 3, 1, 27, 115, 107, 101, 116, 99, 104, 58, 101, 109, 98, 101, 100, 100, 101, 100, 47, 100, 101, 108, 97, 121, 64, 48, 46, 48, 46, 48, 5, 0, 1, 66, 24, 1, 123, 4, 0, 7, 97, 100, 100, 114, 101, 115, 115, 3, 0, 0, 1, 109, 3, 7, 97, 100, 100, 114, 101, 115, 115, 4, 100, 97, 116, 97, 7, 117, 110, 107, 110, 111, 119, 110, 4, 0, 21, 110, 111, 45, 97, 99, 107, 110, 111, 119, 108, 101, 100, 103, 101, 45, 115, 111, 117, 114, 99, 101, 3, 0, 2, 1, 113, 5, 3, 98, 117, 115, 0, 0, 16, 97, 114, 98, 105, 116, 114, 97, 116, 105, 111, 110, 45, 108, 111, 115, 115, 0, 0, 14, 110, 111, 45, 97, 99, 107, 110, 111, 119, 108, 101, 100, 103, 101, 1, 3, 0, 7, 111, 118, 101, 114, 114, 117, 110, 0, 0, 5, 111, 116, 104, 101, 114, 0, 0, 4, 0, 10, 101, 114, 114, 111, 114, 45, 99, 111, 100, 101, 3, 0, 4, 1, 112, 125, 1, 113, 2, 4, 114, 101, 97, 100, 1, 119, 0, 5, 119, 114, 105, 116, 101, 1, 6, 0, 4, 0, 9, 111, 112, 101, 114, 97, 116, 105, 111, 110, 3, 0, 7, 4, 0, 3, 105, 50, 99, 3, 1, 1, 104, 9, 1, 112, 8, 1, 112, 6, 1, 106, 1, 12, 1, 5, 1, 64, 3, 4, 115, 101, 108, 102, 10, 7, 97, 100, 100, 114, 101, 115, 115, 1, 10, 111, 112, 101, 114, 97, 116, 105, 111, 110, 115, 11, 0, 13, 4, 0, 23, 91, 109, 101, 116, 104, 111, 100, 93, 105, 50, 99, 46, 116, 114, 97, 110, 115, 97, 99, 116, 105, 111, 110, 1, 14, 1, 106, 1, 6, 1, 5, 1, 64, 3, 4, 115, 101, 108, 102, 10, 7, 97, 100, 100, 114, 101, 115, 115, 1, 3, 108, 101, 110, 119, 0, 15, 4, 0, 16, 91, 109, 101, 116, 104, 111, 100, 93, 105, 50, 99, 46, 114, 101, 97, 100, 1, 16, 1, 106, 0, 1, 5, 1, 64, 3, 4, 115, 101, 108, 102, 10, 7, 97, 100, 100, 114, 101, 115, 115, 1, 4, 100, 97, 116, 97, 6, 0, 17, 4, 0, 17, 91, 109, 101, 116, 104, 111, 100, 93, 105, 50, 99, 46, 119, 114, 105, 116, 101, 1, 18, 1, 64, 4, 4, 115, 101, 108, 102, 10, 7, 97, 100, 100, 114, 101, 115, 115, 1, 5, 119, 114, 105, 116, 101, 6, 8, 114, 101, 97, 100, 45, 108, 101, 110, 119, 0, 17, 4, 0, 22, 91, 109, 101, 116, 104, 111, 100, 93, 105, 50, 99, 46, 119, 114, 105, 116, 101, 45, 114, 101, 97, 100, 1, 19, 3, 1, 25, 115, 107, 101, 116, 99, 104, 58, 101, 109, 98, 101, 100, 100, 101, 100, 47, 105, 50, 99, 64, 48, 46, 48, 46, 48, 5, 1, 2, 3, 0, 0, 5, 100, 101, 108, 97, 121, 2, 3, 0, 1, 3, 105, 50, 99, 1, 66, 8, 2, 3, 2, 1, 2, 4, 0, 5, 100, 101, 108, 97, 121, 3, 0, 0, 2, 3, 2, 1, 3, 4, 0, 3, 105, 50, 99, 3, 0, 2, 1, 105, 3, 1, 105, 1, 1, 64, 2, 10, 99, 111, 110, 110, 101, 99, 116, 105, 111, 110, 4, 5, 100, 101, 108, 97, 121, 5, 1, 0, 4, 0, 3, 114, 117, 110, 1, 6, 4, 1, 25, 115, 107, 101, 116, 99, 104, 58, 101, 109, 98, 101, 100, 100, 101, 100, 47, 114, 117, 110, 64, 48, 46, 48, 46, 48, 5, 4, 4, 1, 28, 115, 107, 101, 116, 99, 104, 58, 101, 109, 98, 101, 100, 100, 101, 100, 47, 115, 99, 114, 101, 101, 110, 64, 48, 46, 48, 46, 48, 4, 0, 11, 12, 1, 0, 6, 115, 99, 114, 101, 101, 110, 3, 0, 0, 0, 70, 9, 112, 114, 111, 100, 117, 99, 101, 114, 115, 1, 12, 112, 114, 111, 99, 101, 115, 115, 101, 100, 45, 98, 121, 2, 13, 119, 105, 116, 45, 99, 111, 109, 112, 111, 110, 101, 110, 116, 6, 48, 46, 50, 49, 46, 48, 16, 119, 105, 116, 45, 98, 105, 110, 100, 103, 101, 110, 45, 114, 117, 115, 116, 6, 48, 46, 49, 56, 46, 48];

#[inline(never)]
#[doc(hidden)]
#[cfg(target_arch = "wasm32")]
pub fn __link_section() {}
